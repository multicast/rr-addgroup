#!/usr/bin/env bash
test -z "$(type -p)" || { echo bash required; exit 1; }
set -Eeuo pipefail
source "${RRCONFINC}"

# command line argument, if specified, has preference
test $# -eq 1 && ADDGROUP_NAME="${1}"

# check group name
: "${ADDGROUP_NAME:-${GROUP_NAME:-}}"
if [[ "${ADDGROUP_NAME}" = "" ]]; then
  fail "Missing group name to add."
fi

# check group gid
: "${ADDGROUP_GIDFORCE:=}"
: "${ADDGROUP_GID:=${GROUP_GID:-}}"

# if forced, ensure requested GID is the same as forced
test -n "${ADDGROUP_GIDFORCE}" &&
  ADDGROUP_GID="${ADDGROUP_GIDFORCE}"

getent group "${ADDGROUP_NAME}" >/dev/null 2>&1 || {
  # the group does not exist

  test -z "${ADDGROUP_GID}" &&
    # no gid requested - add by name:
    exec addgroup "${ADDGROUP_NAME}"

  # use provided gid to create group:
  exec addgroup --gid "${ADDGROUP_GID}" "${ADDGROUP_NAME}"
}

## group exists
##
test -z "${ADDGROUP_GID}" &&
  exit 0 # no gid requested or forced

currentgid="$(getent group "${ADDGROUP_NAME}" | awk -F: '{print$3}')"
test "${ADDGROUP_GID}" -eq "${currentgid}" &&
  exit 0
logv "Group ${ADDGROUP_NAME} already exist with GID=${currentgid}"

test -z "${ADDGROUP_GIDFORCE}" &&
  exit 0
fail "Cannot change group ${ADDGROUP_NAME} GID to ${ADDGROUP_GIDFORCE}"
